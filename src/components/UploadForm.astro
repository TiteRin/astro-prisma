---
import Icons from './icons/Icons.astro';
import "../styles/upload-form.scss";

interface Props {
    contributor?: string;
}

const { contributor = "" } = Astro.props;
---

<form class="upload-form" id="uploadForm" enctype="multipart/form-data">
    <h2 class="upload-form__title">Ajouter une nouvelle fiche de lecture</h2>

    <div class="upload-form__field">
        <label for="contributor">Votre nom</label>
        <input
            type="text"
            id="contributor"
            name="contributor"
            value={contributor || "Nom par défaut"}
            required
            placeholder="Entrez votre nom"
        />
    </div>

    <div class="upload-form__file-upload">
        <input
            type="file"
            id="fileInput"
            name="new-note"
            accept=".md,.mdx"
            required
        />
        <label for="fileInput" class="upload-form__file-upload-label">
            <Icons name="upload" />
            <span id="fileName">Choisissez un fichier ou glissez-le ici</span>
            <p>Seuls les fichiers .md et .mdx sont acceptés</p>
        </label>
    </div>

    <div class="upload-form__file-upload">
        <input
            type="file"
            id="coverImageInput"
            name="cover-image"
            accept="image/*"
            required
        />
        <label for="coverImageInput" class="upload-form__file-upload-label">
            <Icons name="image" />
            <span id="coverImageName">Choisissez une image de couverture</span>
            <p>Formats acceptés : JPG, PNG, GIF</p>
        </label>
    </div>

    <div class="upload-form__info">
        <h3>Important concernant les images</h3>
        <p>Pour les images dans le contenu de votre fiche :</p>
        <ul>
            <li>Les images doivent être hébergées sur un service externe (comme Imgur, GitHub, etc.)</li>
            <li>Utilisez des URLs absolues pour vos images</li>
            <li>Vérifiez que les URLs sont accessibles publiquement</li>
        </ul>
    </div>

    <div class="upload-form__submit">
        <button type="button" id="submitButton" class="btn-action with-border">
            <span class="button-text">Envoyer la fiche</span>
            <span class="loading-spinner" hidden>
                <Icons name="loading" />
            </span>
        </button>
    </div>
</form>

<div id="toast-container" class="toast-container"></div>

<style>
    .upload-form {
        &[data-loading="true"] {
            opacity: 0.7;
            pointer-events: none;
        }
    }

    .loading-spinner {
        display: inline-flex;
        animation: spin 1s linear infinite;
        margin-left: 0.5rem;
        
        svg {
            width: 1em;
            height: 1em;
        }
    }

    .button-text {
        display: inline-block;
    }

    .loading-spinner {
        display: none;
    }

    .btn-action[data-loading="true"] {
        .button-text {
            display: inline-block;
        }
        
        .loading-spinner {
            display: inline-flex;
        }
    }

    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    .toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .toast {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        border-radius: 0.5rem;
        background: white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.3s ease-out;
        max-width: 400px;
    }

    .toast--success {
        border-left: 4px solid #4caf50;
    }

    .toast--error {
        border-left: 4px solid #f44336;
    }

    .toast--warning {
        border-left: 4px solid #ff9800;
    }

    .toast--info {
        border-left: 4px solid #2196f3;
    }

    .toast-icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toast-content {
        flex-grow: 1;
    }

    .toast-close {
        background: none;
        border: none;
        padding: 0.25rem;
        cursor: pointer;
        opacity: 0.5;
        transition: opacity 0.2s;
    }

    .toast-close:hover {
        opacity: 1;
    }

    .icon {
        width: 1.5rem;
        height: 1.5rem;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>

<script>
    function setLoading(isLoading: boolean): void {
        const form = document.getElementById('uploadForm') as HTMLFormElement;
        const submitButton = document.getElementById('submitButton');
        if (form && submitButton) {
            form.setAttribute('data-loading', isLoading.toString());
            submitButton.setAttribute('data-loading', isLoading.toString());
            const buttonText = submitButton.querySelector('.button-text');
            if (buttonText) {
                buttonText.textContent = isLoading ? 'En cours d\'envoi' : 'Envoyer la fiche';
            }
        }
    }

    function showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'success'): void {
        const container = document.getElementById('toast-container');
        if (!container) return;

        const toast = document.createElement('div');
        toast.className = `toast toast--${type}`;
        toast.innerHTML = `
            <span class="toast-icon">
                ${type === 'success' ? '<svg viewBox="0 0 24 24" width="24" height="24" class="icon"><path fill="currentColor" d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/></svg>' : ''}
                ${type === 'error' ? '<svg viewBox="0 0 24 24" width="24" height="24" class="icon"><path fill="currentColor" d="M12 2L1 21h22L12 2zm0 3.99L19.53 19H4.47L12 5.99zM11 16h2v2h-2zm0-6h2v4h-2z"/></svg>' : ''}
                ${type === 'warning' ? '<svg viewBox="0 0 24 24" width="24" height="24" class="icon"><path fill="currentColor" d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"/></svg>' : ''}
                ${type === 'info' ? '<svg viewBox="0 0 24 24" width="24" height="24" class="icon"><path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/></svg>' : ''}
            </span>
            <span class="toast-content">${message}</span>
            <button class="toast-close" onclick="this.parentElement.remove()">
                <svg viewBox="0 0 24 24" width="24" height="24" class="icon">
                    <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
                </svg>
            </button>
        `;

        container.appendChild(toast);

        // Auto-remove success and info toasts after 5 seconds
        if (type === 'success' || type === 'info') {
            setTimeout(() => toast.remove(), 5000);
        }
    }
</script>