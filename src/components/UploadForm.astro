---
import { Icon } from "astro-icon/components";
import UploadProgress from "./UploadProgress.astro";
import "../styles/upload-form.scss";
import "../types/upload-progress.d.ts";

interface Props {
    contributor?: string;
    defaultFile?: string;
    defaultImage?: string;
    formId?: string;
}

const { contributor = "", defaultFile = "", defaultImage = "", formId = "uploadForm" } = Astro.props;
---

<form class="upload-form" id={formId} enctype="multipart/form-data">
    <h2 class="upload-form__title">Ajouter une nouvelle fiche de lecture</h2>

    <div class="upload-form__field">
        <label for={`${formId}-contributor`}>Votre nom</label>
        <input
            type="text"
            id={`${formId}-contributor`}
            name="contributor"
            value={contributor}
            required
            placeholder="Entrez votre nom"
        />
    </div>

    <div class="upload-form__file-upload">
        <input
            type="file"
            id={`${formId}-fileInput`}
            name="new-note"
            accept=".md,.mdx"
            required
        />
        <label for={`${formId}-fileInput`} class="upload-form__file-upload-label">
            <Icon name="mdi:upload" />
            <span id={`${formId}-fileName`}>Choisissez un fichier ou glissez-le ici</span>
            <p>Seuls les fichiers .md et .mdx sont acceptés</p>
        </label>
    </div>

    <div class="upload-form__file-upload">
        <input
            type="file"
            id={`${formId}-coverImageInput`}
            name="cover-image"
            accept="image/*"
            required
        />
        <label for={`${formId}-coverImageInput`} class="upload-form__file-upload-label">
            <Icon name="mdi:image" />
            <span id={`${formId}-coverImageName`}>Choisissez une image de couverture</span>
            <p>Formats acceptés : JPG, PNG, GIF</p>
        </label>
    </div>

    <div class="upload-form__info">
        <h3>Important concernant les images</h3>
        <p>Pour les images dans le contenu de votre fiche :</p>
        <ul>
            <li>Les images doivent être hébergées sur un service externe (comme Imgur, GitHub, etc.)</li>
            <li>Utilisez des URLs absolues pour vos images</li>
            <li>Vérifiez que les URLs sont accessibles publiquement</li>
        </ul>
    </div>

    <div class="upload-form__field upload-form__draft-option">
        <label class="checkbox-label">
            <input
                type="checkbox"
                id={`${formId}-isDraft`}
                name="is_draft"
                value="true"
            />
            <span>Sauvegarder comme brouillon</span>
        </label>
        <p class="help-text">Les brouillons seront uniquement disponibles dans l'environnement de développement.</p>
    </div>

    <div class="upload-form__submit">
        <button type="button" id={`${formId}-submitButton`} class="btn-action with-border">
            <span class="button-text">Envoyer la fiche</span>
            <span class="loading-spinner" hidden>
                <Icon name="mdi:loading" />
            </span>
        </button>
    </div>
</form>

<UploadProgress formId={formId} />

<div id={`${formId}-toast-container`} class="toast-container"></div>

<style>
    .upload-form {
        &[data-loading="true"] {
            opacity: 0.7;
            pointer-events: none;
        }
    }

    .upload-form__draft-option {
        margin: 1rem 0;
        
        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
        }

        input[type="checkbox"] {
            width: 1.2rem;
            height: 1.2rem;
        }

        .help-text {
            margin-top: 0.25rem;
            font-size: 0.875rem;
            color: var(--text-muted);
        }
    }

    .loading-spinner {
        display: inline-flex;
        animation: spin 1s linear infinite;
        margin-left: 0.5rem;
        
        svg {
            width: 1em;
            height: 1em;
        }
    }

    .button-text {
        display: inline-block;
    }

    .loading-spinner {
        display: none;
    }

    .btn-action[data-loading="true"] {
        .button-text {
            display: inline-block;
        }
        
        .loading-spinner {
            display: inline-flex;
        }
    }

    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    .toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .toast {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        border-radius: 0.5rem;
        background: white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.3s ease-out;
        max-width: 400px;
    }

    .toast--success {
        border-left: 4px solid #4caf50;
    }

    .toast--error {
        border-left: 4px solid #f44336;
    }

    .toast--warning {
        border-left: 4px solid #ff9800;
    }

    .toast--info {
        border-left: 4px solid #2196f3;
    }

    .toast-icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toast-content {
        flex-grow: 1;
    }

    .toast-close {
        background: none;
        border: none;
        padding: 0.25rem;
        cursor: pointer;
        opacity: 0.5;
        transition: opacity 0.2s;
    }

    .toast-close:hover {
        opacity: 1;
    }

    .icon {
        width: 1.5rem;
        height: 1.5rem;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>

<script define:vars={{ defaultFile, defaultImage, formId }}>
    function setLoading(isLoading) {
        const form = document.getElementById(formId);
        const submitButton = document.getElementById(`${formId}-submitButton`);
        if (form && submitButton) {
            form.setAttribute('data-loading', isLoading.toString());
            submitButton.setAttribute('data-loading', isLoading.toString());
            const buttonText = submitButton.querySelector('.button-text');
            if (buttonText) {
                buttonText.textContent = isLoading ? 'En cours d\'envoi' : 'Envoyer la fiche';
            }
        }
    }

    function showToast(message, type = 'success') {
        const container = document.getElementById(`${formId}-toast-container`);
        if (!container) return;

        const toast = document.createElement('div');
        toast.className = `toast toast--${type}`;
        toast.innerHTML = `
            <div class="toast-icon">
                ${type === 'success' ? '✓' : type === 'error' ? '✕' : type === 'warning' ? '⚠' : 'ℹ'}
            </div>
            <div class="toast-content">${message}</div>
            <button class="toast-close">×</button>
        `;

        container.appendChild(toast);

        const closeButton = toast.querySelector('.toast-close');
        if (closeButton) {
            closeButton.addEventListener('click', () => {
                toast.remove();
            });
        }

        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById(formId);
        const fileInput = document.getElementById(`${formId}-fileInput`);
        const coverImageInput = document.getElementById(`${formId}-coverImageInput`);
        const fileName = document.getElementById(`${formId}-fileName`);
        const coverImageName = document.getElementById(`${formId}-coverImageName`);
        const submitButton = document.getElementById(`${formId}-submitButton`);
        const dropZone = form?.querySelector('.upload-form__file-upload');

        if (!form || !fileInput || !coverImageInput || !fileName || !coverImageName || !submitButton || !dropZone) {
            console.error('Required DOM elements not found');
            return;
        }

        // Set default values if provided
        if (defaultFile) {
            const blob = new Blob([defaultFile], { type: 'text/markdown' });
            const file = new File([blob], 'default-note.md', { type: 'text/markdown' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;
            fileName.textContent = 'default-note.md';
        }

        if (defaultImage) {
            fetch(defaultImage)
                .then(response => response.blob())
                .then(blob => {
                    const file = new File([blob], 'default-cover.jpg', { type: 'image/jpeg' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    coverImageInput.files = dataTransfer.files;
                    coverImageName.textContent = 'default-cover.jpg';
                })
                .catch(error => console.error('Error loading default image:', error));
        }

        submitButton.addEventListener('click', async (e) => {
            e.preventDefault();
            
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }
            
            setLoading(true);
            const formData = new FormData(form);
            
            try {
                const response = await fetch('/api/submit-note', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const reader = response.body?.getReader();
                if (!reader) {
                    throw new Error('No reader available');
                }

                const decoder = new TextDecoder();
                let buffer = '';

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    buffer += decoder.decode(value, { stream: true });
                    const lines = buffer.split('\n');
                    buffer = lines.pop() || '';

                    for (const line of lines) {
                        if (!line.trim()) continue;
                        try {
                            const notification = JSON.parse(line);
                            showToast(notification.message, notification.type);
                            
                            // If it's a final success message, reset the form
                            if (notification.type === 'success' && notification.step === 'complete') {
                                form.reset();
                                fileName.textContent = 'Choisissez un fichier ou glissez-le ici';
                                coverImageName.textContent = 'Choisissez une image de couverture';
                            }
                        } catch (e) {
                            console.error('Error parsing notification:', e);
                        }
                    }
                }
            } catch (error) {
                console.error('Error during submission:', error);
                showToast('Une erreur est survenue lors de l\'envoi du fichier. Veuillez vérifier votre connexion et réessayer.', 'error');
            } finally {
                setLoading(false);
            }
        });

        // Add event listeners for file inputs
        fileInput.addEventListener('change', (e) => {
            const target = e.target;
            const file = target.files?.[0];
            if (file) {
                fileName.textContent = file.name;
            }
        });

        coverImageInput.addEventListener('change', (e) => {
            const target = e.target;
            const file = target.files?.[0];
            if (file) {
                coverImageName.textContent = file.name;
            }
        });

        // Drag and drop handling
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone?.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone?.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone?.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropZone?.classList.add('highlight');
        }

        function unhighlight() {
            dropZone?.classList.remove('highlight');
        }

        dropZone?.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            if (!dt) return;
            const files = dt.files;
            if (!files || files.length === 0) return;
            
            // Update the file input and label
            fileInput.files = files;
            if (fileName) {
                fileName.textContent = files[0].name;
            }
        }
    });
</script>


