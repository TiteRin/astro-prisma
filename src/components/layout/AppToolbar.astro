---
import Icons from '../icons/Icons.astro';

import FontSelector from "../features/accessibility/FontSelector.astro";
import ZoomControls from "../features/accessibility/ZoomControls.astro";
import ThemeSwitcher from "../features/accessibility/ThemeSwitcher.astro";
---

<header class="app-toolbar sticky top-0 z-50 flex items-center gap-2 bg-base-200 border-b border-base-300 p-2" role="banner">
    <div class="app-toolbar__brand flex items-center min-w-0 flex-grow">
        <a href="/" 
            class="app-toolbar__home-link flex flex-col items-baseline gap-1 min-w-0 text-primary font-medium outline-none rounded-sm text-decoration-none focus-visible:outline-primary-content" 
            aria-label="Retour à l'accueil">
            <h1 class="app-toolbar__app-name m-0 text-xl font-bold">Prisma</h1>
            <span class="app-toolbar__app-subtitle m-0 text-sm font-normal text-neutral">Pôle recherche</span>
        </a>
    </div>

    <button 
        class="app-toolbar__menu-toggle btn btn-circle btn-outline md:hidden" 
        aria-label="Menu d'accessibilité" 
        aria-expanded="false" 
        aria-controls="accessibility-menu"
        aria-haspopup="true"
    >
        <Icons name="accessibility" aria-hidden="true" />
    </button>

    <div 
        id="accessibility-menu" 
        class="app-toolbar__accessibility hidden absolute top-full left-0 w-full md:w-auto md:relative md:flex gap-4 flex-col md:flex-row items-center bg-base-200 border-b border-base-300 p-2" 
        role="menu"
        aria-label="Options d'accessibilité"
    >
        <FontSelector />
        <ZoomControls />
        <ThemeSwitcher />
    </div>

    <div class="app-toolbar__user">
        <button 
            class="app-toolbar__avatar avatar btn btn-circle btn-outline" 
            aria-label="Menu utilisateur"
            aria-haspopup="true"
        >
            <Icons name="user" aria-hidden="true" />
        </button>
    </div>
</header>

<script>
    const menuToggle = document.querySelector<HTMLButtonElement>('.app-toolbar__menu-toggle');
    const accessibilityMenu = document.querySelector<HTMLDivElement>('#accessibility-menu');

    if (menuToggle && accessibilityMenu) {
        // Handle menu toggle
        menuToggle.addEventListener('click', () => {
            const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
            menuToggle.setAttribute('aria-expanded', (!isExpanded).toString());
            accessibilityMenu.classList.toggle('hidden', !isExpanded);
        });

        // Handle keyboard navigation
        menuToggle.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                menuToggle.click();
            }
        });

        // Close menu when clicking outside
        // document.addEventListener('click', (e) => {
        //     const target = e.target as Node;
        //     if (menuToggle && accessibilityMenu && 
        //         !menuToggle.contains(target) && 
        //         !accessibilityMenu.contains(target) && 
        //         !accessibilityMenu.hidden) {
        //         menuToggle.setAttribute('aria-expanded', 'false');
        //         accessibilityMenu.hidden = true;
        //     }
        // });

        // Close menu on escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && !accessibilityMenu.hidden) {
                menuToggle.setAttribute('aria-expanded', 'false');
                accessibilityMenu.hidden = true;
                menuToggle.focus();
            }
        });

        // Trap focus within the menu when open
        accessibilityMenu.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                const focusableElements = accessibilityMenu.querySelectorAll(
                    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
                );
                const firstFocusable = focusableElements[0] as HTMLElement;
                const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;

                if (e.shiftKey) {
                    if (document.activeElement === firstFocusable) {
                        e.preventDefault();
                        lastFocusable.focus();
                    }
                } else {
                    if (document.activeElement === lastFocusable) {
                        e.preventDefault();
                        firstFocusable.focus();
                    }
                }
            }
        });
    }
</script>
