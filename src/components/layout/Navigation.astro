---
import { House, Tags, Users, FileUp, PanelRightOpen, PanelRightClose } from '@lucide/astro';
import type { Icon as IconType } from '@lucide/astro';

interface NavItem {
    href: string;
    icon: typeof IconType;
    label: string;
}

const navItems: NavItem[] = [
    { href: '/', icon: House, label: 'Accueil' },
    { href: '/tags', icon: Tags, label: 'Index par tag' },
    { href: '/contributors', icon: Users, label: 'Index par contributeur·ice' },
    { href: '/upload', icon: FileUp, label: 'Ajouter une fiche de lecture' }
];

const { pathname } = Astro.url;
---

<div 
    class:list={[
        "hidden md:flex flex-col gap-4 h-full p-4 w-64", // layout styles
        "bg-base-200 border-r border-base-300", // visual styles
        "transition-all duration-300 ease-in-out", // transition styles
        "[&.collapsed]:w-20 [&.collapsed]:p-2", // collapsed state styles
    ]}
    role="navigation" 
    aria-label="Navigation principale"
>
    <!-- Desktop controls -->
    <div class:list={[
        "flex justify-end", // layout styles
        "[&.collapsed]:justify-center", // collapsed state styles
    ]}>
        <button 
            class:list={[
                "btn btn-ghost btn-circle", // button styles
                "text-base-content", // text styles
                "[.collapsed_&]:hidden", // visibility styles
            ]}
            aria-expanded="false"
            aria-controls="navigation-menu"
            aria-label="Réduire la navigation"
        >
            <PanelRightOpen>
        </button>
        <button 
            class:list={[
                "btn btn-ghost btn-circle", // button styles
                "text-base-content", // text styles
                "hidden [.collapsed_&]:block", // visibility styles
            ]}
            aria-expanded="false"
            aria-controls="navigation-menu"
            aria-label="Agrandir la navigation"
        >
            <PanelRightClose />
        </button>
    </div>

    <!-- Navigation menu -->
    <nav 
        id="navigation-menu" 
        class:list={[
            "flex flex-col gap-2 flex-grow", // layout styles
        ]}
    >
        <ul class:list={[
            "menu menu-lg gap-4 p-0", // menu styles
        ]}>
            {navItems.map((item) => (
                <li>
                    <a 
                        href={item.href} 
                        class:list={[
                            "flex items-center gap-2", // layout styles
                            "text-base-content hover:text-primary hover:bg-base-300", // interactive styles
                            "transition-all duration-300", // transition styles
                            "[.collapsed_&]:justify-center", // collapsed state styles
                        ]}
                        aria-current={pathname === item.href ? 'page' : undefined}
                        aria-label={item.label}
                        title={item.label}
                    >
                        <item.icon />
                        <span class:list={[
                            "transition-all duration-300", // transition styles
                            "[.collapsed_&]:hidden", // collapsed state styles
                        ]}>
                            {item.label}
                        </span>
                    </a>
                </li>
            ))}
        </ul>
    </nav>
</div>

<script>
    const navigation = document.querySelector('[role="navigation"]');
    const expandButtons = document.querySelectorAll('[aria-label*="Agrandir"]');
    const collapseButtons = document.querySelectorAll('[aria-label*="Réduire"]');
    const menu = document.getElementById('navigation-menu');

    // Fonction pour gérer l'état du menu
    function toggleMenu(expanded: boolean) {
        if (!navigation || !menu) return;

        // Mettre à jour l'état du menu
        navigation.classList.toggle('collapsed', !expanded);

        // Mettre à jour les attributs ARIA
        expandButtons.forEach(button => {
            button.setAttribute('aria-expanded', expanded.toString());
        });
        collapseButtons.forEach(button => {
            button.setAttribute('aria-expanded', expanded.toString());
        });
    }

    // Gestionnaires d'événements pour les boutons
    expandButtons.forEach(button => {
        button.addEventListener('click', () => toggleMenu(true));
    });

    collapseButtons.forEach(button => {
        button.addEventListener('click', () => toggleMenu(false));
    });
</script>