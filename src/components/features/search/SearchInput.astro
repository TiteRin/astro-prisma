---
import "@/styles/features/search.scss";
import Icons from '../../icons/Icons.astro';
---
<div class="search-wrapper">
    <div class="input-with-icon">
        <input
                type="search"
                placeholder="Rechercher parmi les fiches"
                aria-label="Rechercher parmi les fiches"
                id="global-search"
        />
        <Icons name="search" />
    </div>
    <div class="results-wrapper">
        <h1 class="sr-only">Résultat de la recherche</h1>
        <ul id="results" class="results hidden">
            <li class="loading hidden">Chargement des résultats…</li>
            <li class="no-result hidden">Aucun résultat</li>
        </ul>
    </div>
</div>
<script is:inline>
    (async () => {
        const input = document.querySelector("input#global-search");
        const resultsList = document.querySelector("#results");
        const noResult = resultsList.querySelector(".no-result");
        const loadingResults = resultsList.querySelector(".loading");

        let pagefind;

        function createResultItem(
            url,
            title,
            authors,
            img,
            summary,
            excerpt,
            tags
        ) {
            const li = document.createElement("li");
            li.className = "result-item";

            const link = document.createElement("a");
            link.href = url;
            link.className = "result-item__link";

            const content = document.createElement("div");
            content.className = "result-item__content";

            const header = document.createElement("div");
            header.className = "result-item__header";

            const titleEl = document.createElement("h2");
            titleEl.className = "result-item__title";
            titleEl.textContent = title;

            const authorsEl = document.createElement("p");
            authorsEl.className = "result-item__authors";
            authorsEl.textContent = authors;

            header.appendChild(titleEl);
            header.appendChild(authorsEl);

            const excerptEl = document.createElement("p");
            excerptEl.className = "result-item__excerpt";
            excerptEl.textContent = excerpt;

            content.appendChild(header);
            content.appendChild(excerptEl);

            if (img) {
                const imgEl = document.createElement("img");
                imgEl.src = img;
                imgEl.alt = "";
                imgEl.className = "result-item__image";
                link.appendChild(imgEl);
            }

            link.appendChild(content);
            li.appendChild(link);

            return li;
        }

        async function initPagefind() {
            if (pagefind) return;

            try {
                pagefind = await import("/pagefind/pagefind.js");
                await pagefind.init();
            } catch (e) {
                console.error("Error initializing Pagefind:", e);
            }
        }

        async function handleSearch() {
            if (!pagefind) {
                await initPagefind();
            }

            const query = input.value.trim();
            if (!query) {
                resultsList.classList.add("hidden");
                return;
            }

            resultsList.classList.remove("hidden");
            loadingResults.classList.remove("hidden");
            noResult.classList.add("hidden");

            try {
                const search = await pagefind.search(query);
                const results = await Promise.all(
                    search.results.map(async (result) => {
                        const data = await result.data();
                        return {
                            url: result.url,
                            title: data.meta.title,
                            authors: data.meta.authors,
                            img: data.meta.image,
                            summary: data.meta.description,
                            excerpt: result.excerpt,
                            tags: data.meta.tags,
                        };
                    })
                );

                resultsList.innerHTML = "";
                if (results.length === 0) {
                    noResult.classList.remove("hidden");
                } else {
                    results.forEach((result) => {
                        const item = createResultItem(
                            result.url,
                            result.title,
                            result.authors,
                            result.img,
                            result.summary,
                            result.excerpt,
                            result.tags
                        );
                        resultsList.appendChild(item);
                    });
                }
            } catch (e) {
                console.error("Error searching:", e);
            } finally {
                loadingResults.classList.add("hidden");
            }
        }

        input.addEventListener("input", handleSearch);
        input.addEventListener("focus", handleSearch);
    })();
</script>