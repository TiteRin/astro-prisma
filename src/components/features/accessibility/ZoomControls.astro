---
// Constants
const ZOOM_KEY = "app-zoom-level";
const MIN_ZOOM = 0.5;
const MAX_ZOOM = 2;
const ZOOM_STEP = 0.1;
const BASE_FONT_SIZE = 16; // Base font size in pixels (Tailwind's default)

interface ZoomLevel {
    value: number;
    label: string;
    ariaLabel: string;
    size: string;
}

const zoomLevels: ZoomLevel[] = [
    {
        value: 0.75,
        label: "A",
        ariaLabel: "Très petit",
        size: "text-xs"
    },
    {
        value: 0.875,
        label: "A",
        ariaLabel: "Petit",
        size: "text-sm"
    },
    {
        value: 1,
        label: "A",
        ariaLabel: "Moyen",
        size: "text-base"
    },
    {
        value: 1.25,
        label: "A",
        ariaLabel: "Grand",
        size: "text-lg"
    },
    {
        value: 1.5,
        label: "A",
        ariaLabel: "Très grand",
        size: "text-xl"
    }
];
---

<style>
    .zoom-content {
        transition: font-size 0.2s ease-in-out;
    }
</style>

<ul 
    class="join w-full md:w-auto" 
    role="radiogroup" 
    aria-label="Taille du texte"
    aria-live="polite"
>
    {zoomLevels.map((level) => (
        <li class="px-0 grow">
            <label 
                class={`${level.size} transition-all duration-200 px-4 w-full h-full join-item btn btn-outline btn-md md:btn-sm `} 
                for={level.value.toString()} 
                aria-label={`Taille du texte : ${level.ariaLabel}`} 
                title={`Taille du texte : ${level.ariaLabel}`}
            >
                {level.label}
            </label>
            <input
                type="radio"
                name="zoom-level"
                class="hidden"
                title={level.ariaLabel}
                value={level.value}
                checked={level.value === 1}
                data-value={level.value}
                id={level.value.toString()}
            />
        </li>
    ))}
</ul>

<div id="zoom-status" class="sr-only" aria-live="polite"></div>

<script define:vars={{zoomLevels, BASE_FONT_SIZE}} is:inline>
    const ZOOM_KEY = "app-zoom-level";
    const DEFAULT_ZOOM = 1;
    const STATUS_ID = "zoom-status";

    function getStoredZoom() {
        const stored = localStorage.getItem(ZOOM_KEY);
        return stored ? parseFloat(stored) : DEFAULT_ZOOM;
    }

    function setStoredZoom(level) {
        localStorage.setItem(ZOOM_KEY, level.toString());
    }

    function updateZoom(level) {
        // Update the root font size, which affects all rem-based units
        document.documentElement.style.fontSize = `${BASE_FONT_SIZE * level}px`;

        // Update radio button states and active class
        document.querySelectorAll('input[name="zoom-level"]').forEach(radio => {
            const isChecked = parseFloat(radio.value) === level;
            radio.checked = isChecked;
            radio.closest('li')?.classList.toggle('btn-active', isChecked);
        });

        // Update status message for screen readers
        const status = document.getElementById(STATUS_ID);
        if (status) {
            const selectedLevel = zoomLevels.find(l => l.value === level);
            status.textContent = `Taille du texte définie sur ${selectedLevel?.ariaLabel}`;
        }
    }

    // Handle radio button changes
    document.querySelectorAll('input[name="zoom-level"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
            const target = /** @type {HTMLInputElement} */ (e.target);
            const level = parseFloat(target.value);
            setStoredZoom(level);
            updateZoom(level);
        });
    });

    // Initialize zoom on page load
    document.addEventListener("DOMContentLoaded", () => {
        const storedZoom = getStoredZoom();
        updateZoom(storedZoom);
    });

    // Add keyboard support
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) {
            if (e.key === '0') {
                e.preventDefault();
                setStoredZoom(DEFAULT_ZOOM);
                updateZoom(DEFAULT_ZOOM);
            }
        }
    });
</script>
