---
import {
    SwatchBook,
    Sun,
    Moon,
    Aperture,
    Eye,
    type Icon as IconType,
} from "@lucide/astro";

interface Theme {
    name: string;
    tags: string[];
}

interface ThemeCategory {
    name: string;
    icon: typeof IconType;
    description: string;
}

const categories: ThemeCategory[] = [
    {
        name: "Clairs",
        icon: Sun,
        description: "Thèmes avec un fond clair",
    },
    {
        name: "Sombres",
        icon: Moon,
        description: "Thèmes avec un fond sombre",
    },
    {
        name: "Monochromes",
        icon: Aperture,
        description: "Thèmes utilisant une seule couleur principale",
    },
    {
        name: "Haut contraste",
        icon: Eye,
        description: "Thèmes optimisés pour la lisibilité",
    },
];

const themes: Theme[] = [
    { name: "light", tags: ["Clairs"] },
    { name: "dark", tags: ["Sombres"] },
    { name: "prisma-light", tags: ["Clairs"] },
    { name: "prisma-dark", tags: ["Sombres"] },
    { name: "cupcake", tags: ["Clairs"] },
    { name: "bumblebee", tags: ["Clairs"] },
    { name: "emerald", tags: ["Clairs"] },
    { name: "corporate", tags: ["Clairs", "Monochromes"] },
    { name: "synthwave", tags: ["Sombres"] },
    { name: "retro", tags: ["Clairs"] },
    { name: "cyberpunk", tags: ["Clairs", "Haut contraste"] },
    { name: "valentine", tags: ["Clairs"] },
    { name: "halloween", tags: ["Sombres"] },
    { name: "garden", tags: ["Clairs"] },
    { name: "forest", tags: ["Sombres"] },
    { name: "aqua", tags: ["Sombres"] },
    { name: "pastel", tags: ["Clairs"] },
    { name: "fantasy", tags: ["Clairs"] },
    { name: "wireframe", tags: ["Clairs", "Monochromes"] },
    { name: "black", tags: ["Sombres", "Monochromes"] },
    { name: "luxury", tags: ["Sombres"] },
    { name: "dracula", tags: ["Sombres"] },
    { name: "cmyk", tags: ["Clairs"] },
    { name: "autumn", tags: ["Clairs"] },
    { name: "business", tags: ["Sombres", "Monochromes"] },
    { name: "acid", tags: ["Clairs", "Haut contraste"] },
    { name: "lemonade", tags: ["Clairs"] },
    { name: "night", tags: ["Sombres"] },
    { name: "coffee", tags: ["Sombres"] },
    { name: "winter", tags: ["Clairs"] },
    { name: "high-contrast", tags: ["Haut contraste"] },
];
---

<details
    class:list={[
        "dropdown dropdown-end", // dropdown component styles
        "w-full md:w-auto", // responsive width
    ]}
    id="theme-switcher"
>
    <summary
        class:list={[
            "btn btn-ghost btn-sm", // button styles
            "w-full md:w-auto", // responsive width
            "flex items-center gap-2", // flex layout
        ]}
    >
        <SwatchBook />
        <span class="md:hidden">Thèmes</span>
    </summary>

    <ul
        class:list={[
            "dropdown-content menu p-2", // dropdown menu base styles
            "w-full md:w-52", // responsive width
            "shadow bg-base-100 rounded-box", // visual styles
            "md:max-h-[80vh] md:overflow-y-auto", // responsive height and scroll
            "z-[1]", // z-index
        ]}
    >
        {
            categories.map((category) => {
                const categoryThemes = themes.filter((theme) =>
                    theme.tags.includes(category.name)
                );
                if (categoryThemes.length === 0) return null;

                return (
                    <li>
                        <details>
                            <summary class:list={["flex items-center gap-2"]}>
                                <category.icon />
                                {category.name}
                            </summary>
                            <ul class:list={["max-h-[50vh] overflow-y-auto"]}>
                                {categoryThemes.map((theme) => (
                                    <li>
                                        <button
                                            class:list={[
                                                "flex items-center gap-2",
                                            ]}
                                            onclick={`handleThemeSwitch('${theme.name}')`}
                                        >
                                            <ul
                                                data-theme={theme.name}
                                                class:list={[
                                                    "join m-0 p-2", // join component styles
                                                    "border-base-content/20 border-2 rounded-md", // border styles
                                                ]}
                                            >
                                                <div class="join-item w-4 h-4 bg-primary" />
                                                <div class="join-item w-4 h-4 bg-secondary" />
                                                <div class="join-item w-4 h-4 bg-accent" />
                                            </ul>
                                            <span class="capitalize">
                                                {theme.name}
                                            </span>
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        </details>
                    </li>
                );
            })
        }
    </ul>
</details>

<script is:inline>
    const THEME_KEY = "app-theme";

    const themeSwitcher = document.getElementById("theme-switcher");

    function getStoredTheme() {
        return localStorage.getItem(THEME_KEY) || "light";
    }

    function setStoredTheme(theme) {
        localStorage.setItem(THEME_KEY, theme);
    }

    function handleThemeSwitch(theme) {
        setStoredTheme(theme);
        updateTheme();
    }

    function updateTheme() {
        const theme = getStoredTheme();
        document.documentElement.setAttribute("data-theme", theme);

        // Update active state
        themeSwitcher.querySelectorAll("[data-theme]").forEach((button) => {
            button.classList.toggle(
                "active",
                button.getAttribute("data-theme") === theme
            );
        });
    }

    // Initialize theme on page load
    document.addEventListener("DOMContentLoaded", () => {
        updateTheme();
    });
</script>
