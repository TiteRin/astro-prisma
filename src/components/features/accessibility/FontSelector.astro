---

interface Font {
    name: string;
    className: string;
    description: string;
    category: string;
}

interface GroupedFonts {
    [key: string]: Font[];
}

const fonts: Font[] = [
    {
        name: "Open Dyslexic",
        className: "font-opendyslexic",
        description: "Police conçue pour les personnes dyslexiques",
        category: "Accessibilité"
    },
    {
        name: "Open Sans",
        className: "font-opensans",
        description: "Police sans-serif moderne et lisible",
        category: "Sans-serif"
    },
    {
        name: "Inter",
        className: "font-inter",
        description: "Police optimisée pour les écrans",
        category: "Sans-serif"
    },
    {
        name: "Lexend",
        className: "font-lexend",
        description: "Police conçue pour améliorer la lisibilité",
        category: "Sans-serif"
    },
    {
        name: "Atkinson Hyperlegible",
        className: "font-atkinson",
        description: "Police conçue pour les malvoyants",
        category: "Accessibilité"
    },
    {
        name: "Andika",
        className: "font-andika",
        description: "Police conçue pour les lecteurs débutants",
        category: "Sans-serif"
    },
    {
        name: "Merriweather",
        className: "font-merriweather",
        description: "Police sérif classique, idéale pour l'impression",
        category: "Sérif"
    },
    {
        name: "Source Serif Pro",
        className: "font-sourceserif",
        description: "Police sérif moderne et élégante",
        category: "Sérif"
    }
]

// Grouper les polices par catégorie
const groupedFonts: GroupedFonts = fonts.reduce((acc: GroupedFonts, font: Font) => {
    if (!acc[font.category]) {
        acc[font.category] = [];
    }
    acc[font.category].push(font);
    return acc;
}, {});
---

<div class="dropdown dropdown-end">
    <div tabindex="0" role="button" class="btn btn-ghost gap-2">
        <span id="font-selector__selected" class="font-opensans">Police d'écriture</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
    </div>
    <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow-lg bg-base-100 rounded-box w-72">
        {
            Object.entries(groupedFonts).map(([category, fonts]) => (
                <>
                    <li class="menu-title px-4 py-2 bg-base-200/50 rounded-lg">
                        <span class="text-sm font-bold">{category}</span>
                    </li>
                    <li class="pl-4">
                        <ul class="menu menu-compact">
                            {
                                fonts.map(font => (
                                    <li>
                                        <button 
                                            class={`${font.className} text-left hover:bg-base-200`}
                                            data-value={font.className}
                                        >
                                            <div class="flex flex-col">
                                                <span class="font-medium">{font.name}</span>
                                                <span class="text-xs opacity-70">{font.description}</span>
                                            </div>
                                        </button>
                                    </li>
                                ))
                            }
                        </ul>
                    </li>
                </>
            ))
        }
    </ul>
</div>

<script define:vars={{fonts}} is:inline>
    const FONT_KEY = 'app-font';
    const DEFAULT_FONT = 'font-opensans';
    const button = document.querySelector('.dropdown button');
    const selected = document.getElementById('font-selector__selected');
    const dropdown = document.querySelector('.dropdown');
    
    function getStoredFont() {
        return localStorage.getItem(FONT_KEY) || DEFAULT_FONT;
    }
    
    function setStoredFont(font) {
        localStorage.setItem(FONT_KEY, font);
    }

    function updateFont(font) {
        // Update body font
        document.body.classList.remove(...fonts.map(f => f.className));
        document.body.classList.add(font);
        
        // Update selected text and font
        if (selected) {
            selected.classList.remove(...fonts.map(f => f.className));
            selected.classList.add(font);
            selected.textContent = 'Polices d\'écriture';
        }
    }

    // Handle option selection
    dropdown?.querySelectorAll('button[data-value]').forEach(option => {
        option.addEventListener('click', () => {
            const font = option.getAttribute('data-value');
            if (font) {
                setStoredFont(font);
                updateFont(font);
            }
        });
    });
    
    // Initialize font on page load
    document.addEventListener('DOMContentLoaded', () => {
        updateFont(getStoredFont());
    });
</script>

